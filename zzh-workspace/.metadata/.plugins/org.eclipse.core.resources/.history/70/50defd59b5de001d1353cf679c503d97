package StackMethod;

import java.util.Stack;

public class StackMethod {
	private static boolean isOperator(char op)
	{
		switch (op)
		{
			case '+':
			case '-':
			case '*':
			case '/':
			{
				return true;
			}
			default :
			{
				return false;
			}
		}
	}
	private static int InPriority(char op)
	{
		switch (op)
		{
			case '+':
			case '-':
			{
				return 3;
			}
			case '*':
			case '/':
			{
				return 5;
			}
			case '(':
			{
				return 1;
			}
			case ')':
			{
				return 6;
			}
		}
		return 0;
	}
	private static int OutPriority(char op)
	{
		switch (op)
		{
			case '+':
			case '-':
			{
				return 2;
			}
			case '*':
			case '/':
			{
				return 4;
			}
			case '(':
			{
				return 6;
			}
			case ')':
			{
				return 1;
			}
		}
		return 0;
	}
	public static String toSuffix(String exp)
	{
		Stack<Character> ops = new Stack<>();
		StringBuilder Suffix = new StringBuilder();
		
		
		for (int i =0; i < exp.length(); i++)
		{
			char ch = exp.charAt(i);
			if(Character.isDigit(ch))
			{
				while(i < exp.length() && Character.isDigit(ch))
				{
					Suffix.append(ch);
					i++;
				}
			}
			else if(isOperator(ch))
			{
				if(!ops.isEmpty() && OutPriority(ch) > InPriority(ops.peek()))
				{
					ops.push(ch);
				}
				else if(!ops.isEmpty() && OutPriority(ch) < InPriority(ops.peek()))
				{
					Suffix.append(ops.pop());
				}
				else if(!ops.isEmpty() && OutPriority(ch) == InPriority(ops.peek()))
				{
					ops.pop();
				}
				ops.push(ch);
			}
		}
		while(!ops.isEmpty())
		{
			Suffix.append(ops.pop());
		}
		return Suffix.toString();
	}
	public static void main(String[] args)
	{
		System.out.println(toSuffix("6*(6-2)"));
	}
}
