package StackMethod;
import java.util.*;
import javax.swing.*;

import ScriptMethod.ScriptMethod;
import javafx.event.ActionEvent;
import java.awt.*;
import java.awt.event.ActionListener;
import javax.script.*;
public class StackMethod extends JFrame implements ActionListener
{
	private JTextField text1,text2;//创建文本框的对象
	private GridBagConstraints gbc;
	private String expression;
	private String[] ButtonLabels = {"(",")","Back","/","7","8","9","*","4","5","6","-","1","2","3","+","CE","0",".","="};
	private static int judge = 0;//表示输入的运算字符串是否正确
	private int NowIn = 1;//表示输入状态
	private Font font1 = new Font("宋体", Font.PLAIN,50);//设置字体
	private Font font2 = new Font("宋体", Font.PLAIN,30);//设置字体

	public static void main(String[] args)
	{
		StackMethod stackmethod = new StackMethod();
	}
	public StackMethod()
	{
		setTitle("calculator");//设置窗口标题
		setSize(720,720);//设置窗口大小
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//窗口关闭方式
		
		text1 = new JTextField(20);//创建文本框
		text2 = new JTextField(20);
		//text1.setEditable(false);//让文本框变为不可输入
		text2.setEditable(false);
		
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		
		text1.setFont(font1);//将设置的字体添加到text文本框中
		text2.setFont(font1);
		text1.setHorizontalAlignment(JTextField.RIGHT);
		text2.setHorizontalAlignment(JTextField.RIGHT);
		
		JPanel PanelText = new JPanel();//创立一个文本面板
		PanelText.setLayout(new GridBagLayout());
		
		PanelText.add(text1,gbc);//将文本框添加到文本面板里
		gbc.gridy = 0;
        PanelText.add(text1, gbc);

        gbc.gridy = 1;
        PanelText.add(text2, gbc);
        add(PanelText,BorderLayout.NORTH);
		
		JPanel PanelButton = new JPanel(new GridLayout(5,4));//新建一个按钮面板
		JButton buttons[] = new JButton[ButtonLabels.length];//初始化按钮数组
		for (int i = 0; i < ButtonLabels.length; i++)
		{
			buttons[i] = new JButton(ButtonLabels[i]);
			buttons[i].setFont(new Font("宋体",Font.BOLD,15));//设置按钮的字体大小,粗细
			buttons[i].addActionListener(this);//为每个按钮添加监听器，需要在下面重写actionPerformed方法
			PanelButton.add(buttons[i]);//添加到按钮面板上
		}
	    	
	    add(PanelButton,BorderLayout.CENTER);//将按钮面版添加到窗口的中心
	    
	   

		
		setVisible(true);//使窗口可见
	}
	public void actionPerformed(java.awt.event.ActionEvent e)//实现按钮对应的动作
	{
		judge = 0;
		String label = ((JButton)e.getSource()).getText();//将按钮上的文本转化，赋给label
		switch (label)
			{ 
			case "=":
			{
				if(NowIn == 1)
				{
					text1.setFont(font2);
					text2.setFont(font1);
					NowIn = 2;
				}
				expression = text1.getText();
				double result = evaluateExpression(expression);
				text2.setText(Double.toString(result));
				switch (judge)
				{
					case 0:
					{
						text2.setText("="+Double.toString(result));
						break;
					}
					case 1:
					{
						text2.setText("请输入正确表达式");
						break;
					}
					case 2:
					{
						text2.setText("括号不匹配");
						break;
					}
					case 3:
					{
						text2.setText("除数不能为零");
						break;
					}
					
				}
				break;
			}
			case "CE":
			{
				text1.setText("");
				text2.setText("");
				break;
			}
			case "Back":
			{
				String temp = text1.getText();
				text1.setText(temp.substring(0,temp.length()-1));
				expression = text1.getText();
				double result = evaluateExpression(expression);
				text2.setText(Double.toString(result));
				break;
			}
			case ".":
			{
				boolean flag = false;
				for(int i = 0; i < text1.getText().length(); i++)
				{
					if(text1.getText().charAt(i) == '.')
					{
						flag = true;
						break;
					}
				}
				if(!flag)
				{
					text1.setText(text1.getText()+label);
					expression = text1.getText();
					double result = evaluateExpression(expression);
					text2.setText(Double.toString(result));
				}
				break;
			}
			
			default :
			{
				if(NowIn == 1)//还未得出结果的状态
				{
					switch (label)
					{
					case "+":
				//	case "-":
					case "*":
					case "/":
					case ")":	
					{
						char temp = text1.getText().charAt(text1.getText().length()-1);
						if(temp == '+' || temp == '-' || temp == '*' || temp == '/' || temp == '(')
						{
							
						}
						else
						{
							text1.setText(text1.getText()+label);
							expression = text1.getText();
							double result = evaluateExpression(expression);
							text2.setText(Double.toString(result));
						}
						break;
					}
					case "-":
					{
						char temp = text1.getText().charAt(text1.getText().length()-1);
						if(temp == '+' || temp == '-' || temp == '*' || temp == '/' )
						{
						}
						else
						{
							text1.setText(text1.getText()+label);
							expression = text1.getText();
							double result = evaluateExpression(expression);
							text2.setText(Double.toString(result));
						}
						break;
					}
					default:
					{
						text1.setText(text1.getText()+label);
						expression = text1.getText();
						double result = evaluateExpression(expression);
						text2.setText(Double.toString(result));
					}
					}
					text1.setFont(font1);
					text2.setFont(font2);
					
				}
				else if(NowIn == 2)//在得出结果的状态
				{
					text1.setFont(font1);
					text2.setFont(font2);
					switch (label)
						{
						case "1":
						case "2":
						case "3":
						case "4":
						case "5":
						case "6":
						case "7":
						case "8":
						case "9":
						case "0":
						{
							text1.setText(label);
							expression = text1.getText();
							double result = evaluateExpression(expression);
							text2.setText(Double.toString(result));
							break;
						}
						
						default:
						{
							double result = evaluateExpression(text1.getText());
							text1.setText(Double.toString(result)+label);
						}
					}
					NowIn = 1;
				}
				
				expression = text1.getText();
				double result = evaluateExpression(expression);
				text2.setText(Double.toString(result));
				
				switch (judge)
				{
					case 0:
					{
						text2.setText("="+Double.toString(result));
						break;
					}
					case 1:
					{
						text2.setText("请输入正确表达式");
						break;
					}
					case 2:
					{
						text2.setText("括号不匹配");
						break;
					}
					case 3:
					{
						text2.setText("除数不能为零");
						break;
					}
					
				}
				
			}
		}
	}
	public static double evaluateExpressionSimple(String expression)
	{
		double num = 0;
		double result = 0;
		char formerOps = ' ';
        expression = expression.replaceAll("\\s+", ""); // 去除空格
        for(int i = 0; i < expression.length(); i++)
        {
        	char ch = expression.charAt(i);
        	if(ch >= '0' && ch <= '9')
        	{
        		int j = i;
        		while(j < expression.length() && (expression.charAt(j) >= '0' && expression.charAt(j) <= '9') || expression.charAt(j) == '.')
        		{
        			j++;
        		}
        		num = Double.parseDouble(expression.substring(i,j));
        		i = j-1;
        	}
        	else if(ch == '+' || ch == '-')
        	{
        		if(formerOps != ' ')
        			result = applyOperator(formerOps,result,num);
        		else result = num;
        		formerOps = ch;
        	}
        }
        result = applyOperator(formerOps,result,num);
        return result;
	}

	 public static double evaluateExpression(String expression)
	 {
		 boolean tempFlag = true;
		 for (int i = 0; i < expression.length(); i++)
		 {
			 char ch = expression.charAt(i);
			 if(ch == '*' || ch == '/' || ch == '(' || ch == ')') {
				 tempFlag = false;
				 break;
			 }
		 }
		 if(!tempFlag) {
	        expression = expression.replaceAll("\\s+", ""); // 去除空格
	        expression = expression.replaceAll("\\(-", "(0-"); // 处理负数
	        
	        Stack<Double> operands = new Stack<>(); // 操作数栈
	        Stack<Character> operators = new Stack<>(); // 运算符栈

	        for (int i = 0; i < expression.length(); i++) {
	            char ch = expression.charAt(i);
	            if (ch >= '0' && ch <= '9') { // 数字
	                int j = i;
	                while (j < expression.length() && (expression.charAt(j) >= '0' && expression.charAt(j) <= '9' || expression.charAt(j) == '.')) {
	                    j++;
	                }
	                double operand = Double.parseDouble(expression.substring(i, j));
	                operands.push(operand);
	                i = j - 1;
	            } else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') { // 运算符
	                while (!operators.empty() && (operators.peek() == '*' || operators.peek() == '/') && (ch == '+' || ch == '-')) {
	                    double operand2 = operands.pop();
	                    double operand1 = operands.pop();
	                    char operator = operators.pop();
	                    double result = applyOperator(operator, operand1, operand2);
	                    operands.push(result);
	                }
	                operators.push(ch);
	            } else if (ch == '(') { // 左括号
	                operators.push(ch);
	            } else if (ch == ')') { // 右括号
	                while (!operators.empty() && operators.peek() != '(') {
	                    double operand2 = operands.pop();
	                    double operand1 = operands.pop();
	                    char operator = operators.pop();
	                    double result = applyOperator(operator, operand1, operand2);
	                    operands.push(result);
	                }
	                if (operators.empty()) {
	                    judge = 2;
	                }
	                operators.pop();
	            } else {
	                judge = 1;
	            }
	        }

	        while (!operators.empty()) { // 处理剩余的运算符和操作数
	            if (operators.peek() == '(') {
	                judge = 2;
	            }
	            double operand2 = operands.pop();
	            double operand1 = operands.pop();
	            char operator = operators.pop();
	            double result = applyOperator(operator, operand1, operand2);
	            operands.push(result);
	        }

	        if (operands.empty()) {
	            judge = 1;
	        }
	        return operands.pop();
	    }
		 else {
			 double num = 0;
				double result = 0;
				char formerOps = ' ';
		        expression = expression.replaceAll("\\s+", ""); // 去除空格
		        for(int i = 0; i < expression.length(); i++)
		        {
		        	char ch = expression.charAt(i);
		        	if(ch >= '0' && ch <= '9')
		        	{
		        		int j = i;
		        		while(j < expression.length() && (expression.charAt(j) >= '0' && expression.charAt(j) <= '9'))
		        		{
		        			j++;
		        		}
		        		num = Double.parseDouble(expression.substring(i,j));
		        		i = j-1;
		        	}
		        	else if(ch == '+' || ch == '-')
		        	{
		        		if(formerOps != ' ')
		        			result = applyOperator(formerOps,result,num);
		        		else result = num;
		        		formerOps = ch;
		        	}
		        }
		        result = applyOperator(formerOps,result,num);
		        return result;
		 }
	 }

	    public static double applyOperator(char operator, double operand1, double operand2)
	    {
	        switch (operator) {
	            case '+':
	                return operand1 + operand2;
	            case '-':
	                return operand1 - operand2;
	            case '*':
	                return operand1 * operand2;
	            case '/':
	                if (operand2 == 0) {
	                    judge = 3;
	                }
	                return operand1 / operand2;
	            default:
	                judge = 1;
	        }
	        return 0;
	    }
	}