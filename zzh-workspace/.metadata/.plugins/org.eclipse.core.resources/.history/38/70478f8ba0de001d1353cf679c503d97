package StackMethod;

import java.util.*;

public class Main {
    public static int calculate(String s) {
        Stack<Integer> nums = new Stack<>();
        Stack<Character> ops = new Stack<>();
        int[] priority = {0, 1, 1, 2, 2, 3}; // 运算符优先级

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
                int num = c - '0';
                while (i + 1 < s.length() && Character.isDigit(s.charAt(i + 1))) {
                    num = num * 10 + s.charAt(i + 1) - '0';
                    i++;
                }
                nums.push(num);
            } else {
                while (!ops.isEmpty() && priority[ops.peek() - '('] >= priority[c - '(']) {
                    int b = nums.pop();
                    int a = nums.pop();
                    nums.push(calculate(a, b, ops.pop()));
                }
                ops.push(c);
            }
        }

        while (!ops.isEmpty()) {
            int b = nums.pop();
            int a = nums.pop();
            nums.push(calculate(a, b, ops.pop()));
        }

        return nums.pop();
    }

    private static int calculate(int a, int b, char op) {
        if (op == '+') {
            return a + b;
        } else if (op == '-') {
            return a - b;
        } else if (op == '*') {
            return a * b;
        } else if (op == '/') {
            return a / b;
        } else if (op == '^') {
            return (int) Math.pow(a, b);
        } else {
            throw new IllegalArgumentException("Invalid operator: " + op);
        }
    }

    public static void main(String[] args) {
        String s = "(1-3)*5+2^2";
        int result = calculate(s);
        System.out.println(result); // 输出 3
    }
}
