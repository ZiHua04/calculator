package StackMethod;
import java.util.Arrays;

public class StackMethod{
/**
* 运算符的优先级
*/
static class ZHPri {
char oper;
int operPri;

    public ZHPri(char oper, int operPri) {
        this.oper = oper;
        this.operPri = operPri;
    }
}

static ZHPri[] inPir = {new ZHPri('=', 0), new ZHPri('(', 1), new ZHPri('+', 3), new ZHPri('-', 3), new ZHPri('*', 5), new ZHPri('/', 5), new ZHPri(')', 6)};
static ZHPri[] outPir = {new ZHPri('=', 0), new ZHPri('(', 6), new ZHPri('+', 2), new ZHPri('-', 2), new ZHPri('*', 4), new ZHPri('/', 4), new ZHPri(')', 1)};

enum ZHPriNum {
    InPirBig,
    equal,
    InPirSmall,
}

static ZHPriNum comparePir(char inOper, char outOper) {
    int inOperPri = 0, outOperPri = 0;
    for (ZHPri aInPir : inPir) {
        if (inOper == aInPir.oper) {
            inOperPri = aInPir.operPri;
            break;
        }
    }

    for (ZHPri anOutPir : outPir) {
        if (outOper == anOutPir.oper) {
            outOperPri = anOutPir.operPri;
            break;
        }
    }

    if (inOperPri > outOperPri) {
        return ZHPriNum.InPirBig;
    } else if (inOperPri < outOperPri) {
        return ZHPriNum.InPirSmall;
    } else {
        return ZHPriNum.equal;
    }
}

/**
 * 运算栈
 */
static final int MAXDATANUM = 100;

static class ZHInn {
    char[] data = new char[MAXDATANUM];
    int top = -1;
}

// 初始化一个栈
static void initInn(ZHInn Inn) {
    Inn.top = -1;
}

// 数据压栈
static void pushData(ZHInn Inn, char data) {
    Inn.top++;
    Inn.data[Inn.top] = data;
}

// 数据出栈
static char popData(ZHInn Inn) {
    char data = Inn.data[Inn.top];
    Inn.top--;
    return data;
}

static char gainTopData(ZHInn Inn) {
    return Inn.data[Inn.top];
}

static void transformExpre(String exp, StringBuilder newExp) {
    char data, data1;
    ZHInn inn = new ZHInn();
    initInn(inn);
    pushData(inn, '=');

    for (int i = 0; i < exp.length(); i++) {
        data = exp.charAt(i);
        if (data == '(' || data == ')' || data == '*' || data == '/' || data == '+' || data == '-') {
            switch (comparePir(gainTopData(inn), data)) {
                case InPirSmall:
                    pushData(inn, data);
                    break;

                case equal:
                    popData(inn);
                    break;

                case InPirBig:
                    data1 = popData(inn);
                    newExp.append(data1);
                    break;
            }
        } else {
            while (data >= '0' && data <= '9') {
                newExp.append(data);
                i++;
                if (i < exp.length()) {
                    data = exp.charAt(i);
                } else {
                    break;
                }
            }
            newExp.append('#');
            if (i < 0) {
                break;
            }
            i--;
        }
    }
    while (gainTopData(inn) != '=') {
        data1 = popData(inn);
        newExp.append(data1);
    }
    public static void main(String[] args)
    {
    	
    }
}