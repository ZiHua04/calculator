package ScriptMethod;
import javax.swing.*;
import javafx.event.ActionEvent;
import java.awt.*;
import java.awt.event.ActionListener;
import javax.script.*;

public class ScriptMethod extends JFrame implements ActionListener
{
	private JTextField text1,text2;//创建文本框的对象
	private GridBagConstraints gbc;
	private String expression;
	private String[] ButtonLabels = {"(",")","Back","/","7","8","9","*","4","5","6","-","1","2","3","+","CE","0",".","="};
	private int judge = 0;//表示输入的运算字符串是否正确
	private int NowIn = 1;//表示输入状态
	private Font font1 = new Font("宋体", Font.PLAIN,50);//设置字体
	private Font font2 = new Font("宋体", Font.PLAIN,30);//设置字体

	public static void main(String[] args)
	{
		ScriptMethod scriptmethod = new ScriptMethod();
	}
	public ScriptMethod()
	{
		setTitle("calculator");//设置窗口标题
		setSize(720,720);//设置窗口大小
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//窗口关闭方式
		
		text1 = new JTextField(20);//创建文本框
		text2 = new JTextField(20);
		//text1.setEditable(false);//让文本框变为不可输入
		text2.setEditable(false);
		
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		
		text1.setFont(font1);//将设置的字体添加到text文本框中
		text2.setFont(font1);
		text1.setHorizontalAlignment(JTextField.RIGHT);
		text2.setHorizontalAlignment(JTextField.RIGHT);
		
		JPanel PanelText = new JPanel();//创立一个文本面板
		PanelText.setLayout(new GridBagLayout());
		
		PanelText.add(text1,gbc);//将文本框添加到文本面板里
		gbc.gridy = 0;
        PanelText.add(text1, gbc);

        gbc.gridy = 1;
        PanelText.add(text2, gbc);
        add(PanelText,BorderLayout.NORTH);
		
		JPanel PanelButton = new JPanel(new GridLayout(6,4));//新建一个按钮面板
		JButton buttons[] = new JButton[ButtonLabels.length];//初始化按钮数组
		for (int i = 0; i < ButtonLabels.length; i++)
		{
			buttons[i] = new JButton(ButtonLabels[i]);
			buttons[i].setFont(new Font("宋体",Font.BOLD,15));//设置按钮的字体大小,粗细
			buttons[i].addActionListener(this);//为每个按钮添加监听器，需要在下面重写actionPerformed方法
			PanelButton.add(buttons[i]);//添加到按钮面板上
		}
	    	
	    add(PanelButton,BorderLayout.CENTER);//将按钮面版添加到窗口的中心
	    
	   

		
		setVisible(true);//使窗口可见
	}
	public void actionPerformed(java.awt.event.ActionEvent e)//实现按钮对应的动作
	{
		String label = ((JButton)e.getSource()).getText();//将按钮上的文本转化，赋给label
		switch (label)
			{
			case "=":
			{
				if(NowIn == 1)
				{
					text1.setFont(font2);
					text2.setFont(font1);
					NowIn = 2;
				}
				expression = text1.getText();
				double result = evaluateExpression(expression);
				if(judge == 0)
				{
					text2.setText("="+Double.toString(result));
				}
				else
				{
					text2.setText("请输入正确的运算式");
				}
				break;
			}
			case "CE":
			{
				text1.setText("");
				text2.setText("");
				break;
			}
			case "Back":
			{
				String temp = text1.getText();
				text1.setText(temp.substring(0,temp.length()-1));
				break;
			}
			case "√":
			{
				double num = Double.parseDouble(text1.getText());
				double result = Math.sqrt(num);
				text2.setText(Double.toString(result));
				break;
			}
			default :
			{
				if(NowIn == 1)
				{
					text1.setFont(font1);
					text2.setFont(font2);	
					text1.setText(text1.getText()+label);

				}
				else if(NowIn == 2)
				{
					text1.setFont(font1);
					text2.setFont(font2);
					switch (label)
						{
						case "1":
						case "2":
						case "3":
						case "4":
						case "5":
						case "6":
						case "7":
						case "8":
						case "9":
						case "0":
						{
							text1.setText(label);
							break;
						}
						default:
						{
							System.out.println("6666");
							double result = evaluateExpression(text1.getText());
							text1.setText(Double.toString(result)+label);
						}
					}
					NowIn = 1;
				}
				
				expression = text1.getText();
				double result = evaluateExpression(expression);
				if(judge == 0)
				{
					text2.setText("="+Double.toString(result));
				}
				else
				{
					text2.setText("请输入正确的运算式");
				}
				
			}
		}
	}
	public double evaluateExpression(String expression)
	{
		ScriptEngineManager Manager = new ScriptEngineManager();
		ScriptEngine engine = Manager.getEngineByName("JavaScript");
		try
		{
			Object result = engine.eval(expression);
			judge = 0;
			return Double.parseDouble(result.toString());
		}
		catch(ScriptException e)
		{
			e.printStackTrace();
			judge = 1;
		}
		return 0;
	}
}
